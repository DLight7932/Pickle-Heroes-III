{"ast":null,"code":"var _jsxFileName = \"/home/intern/Projects/Pickle_Heroes_III/Pickle-Heroes-III/src/components/Canvas.js\";\nimport React from 'react';\nimport \"../styles/Canvas.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Field extends React.Component {\n  constructor(props) {\n    super(props);\n    this.gridColor = \"black\";\n    this.fieldWidth = 15;\n    this.fieldHeight = 10;\n    this.hexSize = 100;\n    this.hexHeight = 1.1547;\n    this.ySize = 1;\n    this.fieldX = 0;\n    this.fieldY = -this.hexHeight / 4 * this.hexSize * this.ySize;\n    this.currHex = this.Point(0, 0);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n  }\n\n  DrawGrid() {\n    for (let i = 0; i < this.fieldHeight; i++) {\n      for (let j = 0; j < this.fieldWidth; j++) {\n        this.DrawHex(this.canvasHex, this.Point(j, i), gridColor);\n      }\n    }\n  }\n\n  DrawHex(canvasID, index, color) {\n    let coord = this.IndexToPixel(index);\n    let start = this.Point(coord.x, coord.y - this.hexHeight / 2 * this.hexSize * this.ySize);\n    let end = this.Point(coord.x - this.hexSize / 2, coord.y - this.hexHeight / 4 * this.hexSize * this.ySize);\n    this.drawLine(canvasID, start, end, color);\n    start = end;\n    end = this.Point(coord.x - this.hexSize / 2, coord.y + this.hexHeight / 4 * this.hexSize * this.ySize);\n    this.drawLine(canvasID, start, end, color);\n    start = end;\n    end = this.Point(coord.x, coord.y + this.hexHeight / 2 * this.hexSize * this.ySize);\n    this.drawLine(canvasID, start, end, color);\n    start = end;\n    end = this.Point(coord.x + this.hexSize / 2, coord.y + this.hexHeight / 4 * this.hexSize * this.ySize);\n    this.drawLine(canvasID, start, end, color);\n    start = end;\n    end = this.Point(coord.x + this.hexSize / 2, coord.y - this.hexHeight / 4 * this.hexSize * this.ySize);\n    this.drawLine(canvasID, start, end, color);\n    start = end;\n    end = this.Point(coord.x, coord.y - this.hexHeight / 2 * this.hexSize * this.ySize);\n    this.drawLine(canvasID, start, end, color);\n  }\n\n  Point(x, y) {\n    return {\n      x: x,\n      y: y\n    };\n  }\n\n  PixelToIndex(p) {\n    return this.Point(Math.floor(p.x / this.hexSize), Math.floor(p.y / this.hexHeight));\n  }\n\n  IndexToPixel(i) {\n    return this.Point(this.fieldX + this.hexSize * 0.5 + i.x * this.hexSize + i.y % 2 * this.hexSize / 2, this.fieldY + (this.hexSize * (3 * this.hexHeight / 4) + i.y * this.hexSize * (3 * this.hexHeight / 4)) * this.ySize);\n    ;\n  }\n\n  drawLine(canvasID, start, end, color) {\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.beginPath();\n    ctx.moveTo(start.x, start.y);\n    ctx.strokeStyle = color;\n    ctx.lineTo(end.x, end.y);\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  drawImage(img, canvasID, coord, size) {\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.drawImage(img, coord.x, coord.y, size.x, size.y);\n  }\n\n  componentWillMount() {\n    this.setState({\n      canvasSize: {\n        canvasWidth: 1600,\n        canvasHeight: 900\n      }\n    });\n  }\n\n  componentDidMount() {\n    const {\n      canvasWidth,\n      canvasHeight\n    } = this.state.canvasSize;\n    this.canvasHex.width = canvasWidth;\n    this.canvasHex.height = canvasHeight;\n    this.DrawGrid();\n    let coord = this.Point(500, 500);\n    let size = this.Point(500, 500);\n    let img = new Image(); //img.src = 'logo192.gif';\n    //img.src = \"https://drive.google.com/file/d/1u1Q0DcH4KSxizeFUR0_Zx1JMniccLjWq/view?usp=sharing\";\n    //img.src = \"https://drive.google.com/file/d/1QXFSK2yrl74_FmaUK5bO2927ovr4oA6R/view?usp=sharing\";\n    //img.src = \"Z8X2VMCx.jpg\";\n    //img.src = \"smile.jpg\";\n    //img.src = \"https://img.rosbalt.ru/photobank/1/c/a/0/Z8X2VMCx.jpg\";\n    //img.onload = () => this.drawImage(img, this.canvasHex, coord, size);\n  }\n\n  Distance(p1, p2) {\n    return Math.sqrt(Math.pow(Math.abs(p1.x - p2.x), 2) + Math.pow(Math.abs(p1.y - p2.y), 2));\n  }\n\n  MouseIndex(mouse) {\n    let base = this.Point(0, 0);\n    base.y = Math.floor(mouse.y / (this.hexHeight * this.hexSize * 3 / 4));\n    base.x = Math.floor((mouse.x - base.y % 2 * (this.hexSize / 2)) / this.hexSize);\n    let px;\n    let py1;\n    let py2;\n\n    if (mouse.x > this.IndexToPixel(base).x) {\n      px = this.Point(base.x + 1, base.y);\n    } else {\n      px = this.Point(base.x - 1, base.y);\n    }\n\n    if (mouse.y > this.IndexToPixel(base).y) {\n      py1 = this.Point(base.x, base.y + 1);\n      py2 = this.Point(base.x + 1, base.y + 1);\n    } else {\n      py1 = this.Point(base.x, base.y - 1);\n      py2 = this.Point(base.x + 1, base.y - 1);\n    }\n\n    if (base.y % 2 == 0) {\n      py1.x--;\n      py2.x--;\n    }\n\n    let point = base;\n    if (this.Distance(this.IndexToPixel(px), mouse) < this.Distance(this.IndexToPixel(point), mouse)) point = px;\n    if (this.Distance(this.IndexToPixel(py1), mouse) < this.Distance(this.IndexToPixel(point), mouse)) point = py1;\n    if (this.Distance(this.IndexToPixel(py2), mouse) < this.Distance(this.IndexToPixel(point), mouse)) point = py2;\n    return point;\n  }\n\n  handleMouseMove(e) {\n    this.DrawHex(this.canvasHex, this.currHex, gridColor);\n    this.currHex = this.MouseIndex(this.Point(e.pageX, e.pageY));\n    this.DrawHex(this.canvasHex, this.currHex, \"red\");\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasHex => this.canvasHex = canvasHex,\n        onMouseMove: this.handleMouseMove\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/intern/Projects/Pickle_Heroes_III/Pickle-Heroes-III/src/components/Canvas.js"],"names":["React","Field","Component","constructor","props","gridColor","fieldWidth","fieldHeight","hexSize","hexHeight","ySize","fieldX","fieldY","currHex","Point","handleMouseMove","bind","DrawGrid","i","j","DrawHex","canvasHex","canvasID","index","color","coord","IndexToPixel","start","x","y","end","drawLine","PixelToIndex","p","Math","floor","ctx","getContext","beginPath","moveTo","strokeStyle","lineTo","stroke","closePath","drawImage","img","size","componentWillMount","setState","canvasSize","canvasWidth","canvasHeight","componentDidMount","state","width","height","Image","Distance","p1","p2","sqrt","pow","abs","MouseIndex","mouse","base","px","py1","py2","point","e","pageX","pageY","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport \"../styles/Canvas.css\";\n\nexport default class Field extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.handleMouseMove = this.handleMouseMove.bind(this);\n    }\n\n    gridColor = \"black\";\n    fieldWidth = 15;\n    fieldHeight = 10;\n    hexSize = 100;\n    hexHeight = 1.1547;\n    ySize = 1;\n    fieldX = 0;\n    fieldY = -this.hexHeight / 4 * this.hexSize * this.ySize;\n    currHex = this.Point(0, 0);\n\n    DrawGrid() {\n        for (let i = 0; i < this.fieldHeight; i++) {\n            for (let j = 0; j < this.fieldWidth; j++) {\n                this.DrawHex(this.canvasHex, this.Point(j, i), gridColor);\n            }\n        }\n    }\n\n    DrawHex(canvasID, index, color) {\n        let coord = this.IndexToPixel(index);\n\n        let start = this.Point(coord.x, coord.y - (this.hexHeight / 2) * this.hexSize * this.ySize);\n        let end = this.Point(coord.x - this.hexSize / 2, coord.y - (this.hexHeight / 4) * this.hexSize * this.ySize);\n        this.drawLine(canvasID, start, end, color);\n\n        start = end;\n        end = this.Point(coord.x - this.hexSize / 2, coord.y + (this.hexHeight / 4) * this.hexSize * this.ySize);\n        this.drawLine(canvasID, start, end, color);\n\n        start = end;\n        end = this.Point(coord.x, coord.y + (this.hexHeight / 2) * this.hexSize * this.ySize);\n        this.drawLine(canvasID, start, end, color);\n\n        start = end;\n        end = this.Point(coord.x + this.hexSize / 2, coord.y + (this.hexHeight / 4) * this.hexSize * this.ySize);\n        this.drawLine(canvasID, start, end, color);\n\n        start = end;\n        end = this.Point(coord.x + this.hexSize / 2, coord.y - (this.hexHeight / 4) * this.hexSize * this.ySize);\n        this.drawLine(canvasID, start, end, color);\n\n        start = end;\n        end = this.Point(coord.x, coord.y - (this.hexHeight / 2) * this.hexSize * this.ySize);\n        this.drawLine(canvasID, start, end, color);\n    }\n\n    Point(x, y) {\n        return { x: x, y: y }\n    }\n\n    PixelToIndex(p) {\n        return this.Point(Math.floor(p.x / this.hexSize), Math.floor(p.y / this.hexHeight));\n    }\n\n    IndexToPixel(i) {\n        return this.Point(\n            this.fieldX + this.hexSize * 0.5 + i.x * this.hexSize + (i.y % 2) * this.hexSize / 2,\n            this.fieldY + (this.hexSize * (3 * this.hexHeight / 4) + i.y * this.hexSize * (3 * this.hexHeight / 4)) * this.ySize\n        );;\n    }\n\n    drawLine(canvasID, start, end, color) {\n        const ctx = canvasID.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.moveTo(start.x, start.y);\n        ctx.strokeStyle = color;\n        ctx.lineTo(end.x, end.y);\n        ctx.stroke();\n        ctx.closePath();\n    }\n\n    drawImage(img, canvasID, coord, size) {\n        const ctx = canvasID.getContext(\"2d\");\n        ctx.drawImage(img, coord.x, coord.y, size.x, size.y);\n    }\n\n    componentWillMount() {\n        this.setState({\n            canvasSize: { canvasWidth: 1600, canvasHeight: 900 }\n        })\n    }\n\n    componentDidMount() {\n        const { canvasWidth, canvasHeight } = this.state.canvasSize;\n        this.canvasHex.width = canvasWidth;\n        this.canvasHex.height = canvasHeight;\n        this.DrawGrid();\n        let coord = this.Point(500, 500);\n        let size = this.Point(500, 500);\n        let img = new Image();\n        //img.src = 'logo192.gif';\n        //img.src = \"https://drive.google.com/file/d/1u1Q0DcH4KSxizeFUR0_Zx1JMniccLjWq/view?usp=sharing\";\n        //img.src = \"https://drive.google.com/file/d/1QXFSK2yrl74_FmaUK5bO2927ovr4oA6R/view?usp=sharing\";\n        //img.src = \"Z8X2VMCx.jpg\";\n        //img.src = \"smile.jpg\";\n\n        //img.src = \"https://img.rosbalt.ru/photobank/1/c/a/0/Z8X2VMCx.jpg\";\n        //img.onload = () => this.drawImage(img, this.canvasHex, coord, size);\n    }\n\n    Distance(p1, p2) {\n        return Math.sqrt(Math.pow(Math.abs(p1.x - p2.x), 2) + Math.pow(Math.abs(p1.y - p2.y), 2));\n    }\n\n    MouseIndex(mouse) {\n        let base = this.Point(0, 0);\n        base.y = Math.floor(mouse.y / (this.hexHeight * this.hexSize * 3 / 4));\n        base.x = Math.floor((mouse.x - ((base.y % 2) * (this.hexSize / 2))) / this.hexSize);\n\n        let px;\n        let py1;\n        let py2;\n\n        if (mouse.x > this.IndexToPixel(base).x) {\n            px = this.Point(base.x + 1, base.y);\n        }\n        else {\n            px = this.Point(base.x - 1, base.y);\n        }\n        if (mouse.y > this.IndexToPixel(base).y) {\n            py1 = this.Point(base.x, base.y + 1);\n            py2 = this.Point(base.x + 1, base.y + 1);\n        }\n        else {\n            py1 = this.Point(base.x, base.y - 1);\n            py2 = this.Point(base.x + 1, base.y - 1);\n        }\n        if (base.y % 2 == 0) {\n            py1.x--;\n            py2.x--;\n        }\n\n        let point = base;\n        if (this.Distance(this.IndexToPixel(px), mouse) < this.Distance(this.IndexToPixel(point), mouse))\n            point = px;\n        if (this.Distance(this.IndexToPixel(py1), mouse) < this.Distance(this.IndexToPixel(point), mouse))\n            point = py1;\n        if (this.Distance(this.IndexToPixel(py2), mouse) < this.Distance(this.IndexToPixel(point), mouse))\n            point = py2;\n        return point;\n    }\n\n    handleMouseMove(e) {\n        this.DrawHex(this.canvasHex, this.currHex, gridColor);\n        this.currHex = this.MouseIndex(this.Point(e.pageX, e.pageY));\n        this.DrawHex(this.canvasHex, this.currHex, \"red\");\n    }\n\n    render() {\n        return (\n            <div>\n                <canvas ref={canvasHex => this.canvasHex = canvasHex} onMouseMove={this.handleMouseMove}></canvas>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}